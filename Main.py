# -*- coding: utf-8 -*-
"""
  Date:   24 June 2023

  Author: Dr. Joseph Iannelli
          Washington State University
          United States of America

  Adapted By: Arlo Jones
  Animations By: Liam Crafton

  Synopsis:
  This program computationally solves time-dependent differential equations

  Warranty:
  No express or implied warranty is provided of specific fitness to purposes
  other than demonstrations of solutions of time-dependent differential equations

  License:
  This program may be freely used as is. If results of this program are used in
  reports, conference presentations, conference papers, and/or journal publications
  (hereinafter referred to as "products"), the following acknowledgement should be
  included in the products: "Results were generated by the partial-differential-equation
  python solver developed by Dr. Joseph Iannelli of Washington State University,
  USA"
"""

import numpy
from matplotlib import animation
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from DifferentialSystem import DifferentialSystem


def main():
    print()
    print('Welcome!')
    print()

    # Object initialization
    differentialSystem = DifferentialSystem()

    # Solve system
    differentialSystem.SolveSystem()

    # Output solution
    PrintToScreen(differentialSystem)
    PrintToFile(differentialSystem)
    AnimateSolution(differentialSystem)

    print()
    print('Good bye!')
    print()

    return


def PrintToScreen(differentialSystem):
    # Instantiate local variables
    number_of_rows = len(differentialSystem.computationalSolution.t)
    number_of_columns = len(differentialSystem.computationalSolution.y)

    print()
    # Print X values along axis
    string = ' '
    for j in range(0, len(differentialSystem.xSamplePoints)):
        string = string + str(differentialSystem.xSamplePoints[j]) + ' '

    print(string)

    # Print time followed by y values for each x at the time.
    for i in range(number_of_rows):
        string = str(differentialSystem.computationalSolution.t[i]) + ' '

        for j in range(0, number_of_columns):
            string = string + str(differentialSystem.computationalSolution.y[j][i]) + ' '

        print(string)


def PrintToFile(differentialSystem):
    # Instantiate local variables
    number_of_rows = len(differentialSystem.computationalSolution.t)
    number_of_columns = len(differentialSystem.computationalSolution.y)

    # Create filestream that writes to "solution.txt" file
    fileStream = open('solution.txt', 'wt')

    # Write X values along axis
    string = ' '
    for j in range(0, len(differentialSystem.xSamplePoints)):
        string = string + str(differentialSystem.xSamplePoints[j]) + ' '
    fileStream.write(string)
    fileStream.write('\n')

    # Print time followed by y values for each x at the time.
    for i in range(number_of_rows):
        string = str(differentialSystem.computationalSolution.t[i]) + ' '

        for j in range(0, number_of_columns):
            string = string + str(differentialSystem.computationalSolution.y[j][i]) + ' '

        fileStream.write(string)
        fileStream.write('\n')

    fileStream.close()


def AnimateSolution(differentialSystem):
    fig, ax = plt.subplots()
    minY = numpy.min(differentialSystem.computationalSolution.y[0:, :])
    maxY = numpy.max(differentialSystem.computationalSolution.y[0:, :])
    ax.set_ylim(minY - 1, maxY + 1)

    x = differentialSystem.xSamplePoints
    y = differentialSystem.computationalSolution.y[0:, 0]
    line1, = ax.plot(x, y)

    ax.set(title='t = 0', xlabel='Point on rod', ylabel='Temperature')
    precision = len(str(differentialSystem.deltaT).split('.')[-1])

    def update(frame):
        ax.set(title=f't = {differentialSystem.timeSamplePoints[frame]: .{precision}f}')
        line1.set_ydata(differentialSystem.computationalSolution.y[0:, frame])

    ani = animation.FuncAnimation(fig, update, frames = range(len(differentialSystem.timeSamplePoints)), interval=1000 * differentialSystem.deltaT)
    # mplcursors.cursor()
    # ani.save('animation.html', writer='html')
    plt.show()

    return


# -------------------------------------------------------
main()
# -------------------------------------------------------